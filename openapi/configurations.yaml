openapi: 3.0.3
info:
  title: Configurations
  description: General Configuration APIs for Developer Services products.
  version: '1.0'
servers:
  - url: https://api.circle.com
tags:
  - name: Webhook Subscriptions
    description: Manage subscriptions to notifications.
    x-displayName: Webhook Subscriptions
  - name: Monitor Tokens
    x-displayName: Monitor Tokens
  - name: Developer Account
    x-displayName: Developer Account
  - name: Faucet
    x-displayName: Faucet
  - name: Health
    description: Inspect the health of the API.
    x-displayName: Health
paths:
  /v1/w3s/config/entity/monitoredTokens:
    post:
      tags:
        - Monitor Tokens
      summary: Set monitored tokens
      description: Add a new token to the monitored token list.
      operationId: createMonitoredTokens
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateMonitoredTokens'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoredTokens'
          description: Success and no update happened
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoredTokens'
          description: Success and updated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
    get:
      tags:
        - Monitor Tokens
      summary: Retrieve existing monitored tokens.
      description: Get monitored tokens
      operationId: listMonitoredTokens
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Blockchain'
        - $ref: '#/components/parameters/TokenAddress'
        - $ref: '#/components/parameters/TokenSymbol'
        - $ref: '#/components/parameters/From'
        - $ref: '#/components/parameters/To'
        - $ref: '#/components/parameters/PageBefore'
        - $ref: '#/components/parameters/PageAfter'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoredTokens'
          description: OK
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
            Link:
              $ref: '#/components/headers/PaginationLink'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - Monitor Tokens
      summary: Update monitored tokens
      description: Upsert the monitored token list.
      operationId: updateMonitoredTokens
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateMonitoredTokensRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoredTokens'
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '400':
          $ref: '#/components/responses/BadRequest'
  /v1/w3s/config/entity/monitoredTokens/scope:
    put:
      tags:
        - Monitor Tokens
      summary: Update monitored tokens scope
      description: >-
        Select between monitoring all tokens or selected tokens added to the
        monitored tokens list.
      operationId: updateMonitoredTokensScope
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateMonitoredTokensScope'
      responses:
        '200':
          content: {}
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/w3s/config/entity/monitoredTokens/delete:
    post:
      tags:
        - Monitor Tokens
      summary: Delete monitored tokens
      description: Delete tokens from the monitored token list.
      operationId: deleteMonitoredTokens
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/DeleteMonitoredTokens'
      responses:
        '200':
          content: {}
          description: Success response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/w3s/config/entity/publicKey:
    get:
      tags:
        - Developer Account
      summary: Get public key for entity
      description: Get the public key associated with the entity.
      operationId: getPublicKey
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKey'
          description: Fetched public key successfully.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/w3s/config/entity:
    get:
      tags:
        - Developer Account
      summary: Get configuration for entity
      description: Get the app ID associated to the entity.
      operationId: getEntityConfig
      security:
        - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityConfig'
          description: Fetched configuration for entity successfully.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/faucet/drips:
    post:
      tags:
        - Faucet
      summary: Request testnet tokens
      description: Request testnet tokens for your wallet.
      operationId: requestTestnetTokens
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/XRequestId'
      requestBody:
        $ref: '#/components/requestBodies/FaucetRequest'
      responses:
        '204':
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          description: Successfully requested testnet tokens. No content in body.
        '400':
          $ref: '#/components/responses/DefaultError'
  /ping:
    get:
      summary: Ping
      description: Checks that the service is running.
      operationId: ping
      security: []
      tags:
        - Health
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
          description: Successful ping.
  /v2/notifications/subscriptions:
    post:
      tags:
        - Webhook Subscriptions
      summary: Create a notification subscription
      description: >
        Create a notification subscription by configuring an endpoint to receive
        notifications. For details, see the [Notification
        Flows](https://developers.circle.com/w3s/docs/notification-flows) guide.
      operationId: createSubscription
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/XRequestId'
      requestBody:
        $ref: '#/components/requestBodies/CreateSubscription'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successfully created a notification subscription.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
    get:
      security:
        - BearerAuth: []
      summary: Get all notification subscriptions
      description: Retrieve an array of existing notification subscriptions.
      parameters: []
      operationId: getSubscriptions
      tags:
        - Webhook Subscriptions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions'
          description: Successfully retrieved notification subscriptions.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v2/notifications/subscriptions/{id}:
    get:
      tags:
        - Webhook Subscriptions
      summary: Retrieve a notification subscription
      description: Retrieve an existing notification subscription.
      operationId: getSubscription
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/XRequestId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successfully retrieved subscription.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - Webhook Subscriptions
      summary: Update a notification subscription
      description: |
        Update subscription endpoint to receive notifications.
      operationId: updateSubscription
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/XRequestId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateSubscription'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successfully updated notification subscription.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Webhook Subscriptions
      summary: Delete a notification subscription
      description: Delete an existing subscription.
      operationId: deleteSubscription
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/XRequestId'
      responses:
        '204':
          description: |
            Successfully deleted subscription.
            Note: Response body is returned empty.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /v2/notifications/publicKey/{id}:
    get:
      tags:
        - Webhook Subscriptions
      summary: Get a notification signature public key
      description: >
        Get the public key and algorithm used to digitally sign webhook
        notifications. Verifying the digital signature ensures the notification
        came from Circle.


        In the headers of each webhook, you can find
          1. `X-Circle-Signature`: a header containing the digital signature generated by Circle.
          2. `X-Circle-Key-Id`: a header containing the UUID. This is will be used as the `ID` as URL parameter to retrieve the relevant public key.
      operationId: getNotificationSignature
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/XRequestId'
      responses:
        '200':
          description: Successfully retrieved a digital notification signature.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSignaturePublicKey'
        '400':
          $ref: '#/components/responses/DefaultError'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: PREFIX:ID:SECRET
      description: >-
        Circle's API Keys are formatted in the following structure
        "PREFIX:ID:SECRET". All three parts are requred to make a successful
        request.
  schemas:
    Blockchain:
      type: string
      description: >-
        The blockchain network that the resource is to be created on or is
        currently on.
      enum:
        - ETH
        - ETH-SEPOLIA
        - AVAX
        - AVAX-FUJI
        - MATIC
        - MATIC-AMOY
        - SOL
        - SOL-DEVNET
        - ARB
        - ARB-SEPOLIA
        - NEAR
        - NEAR-TESTNET
        - EVM
        - EVM-TESTNET
        - UNI
        - UNI-SEPOLIA
        - BASE
        - BASE-SEPOLIA
        - OP
        - OP-SEPOLIA
        - APTOS
        - APTOS-TESTNET
      example: MATIC-AMOY
    Address:
      title: Address
      description: >
        Blockchain generated unique identifier, associated with wallet
        (account), smart contract or other blockchain objects.
      type: string
      example: '0xca9142d0b9804ef5e239d3bc1c7aa0d1c74e7350'
    XRequestId:
      type: string
      description: >-
        A unique identifier, which can be helpful for identifying a request when
        communicating with Circle support.
      example: 2adba88e-9d63-44bc-b975-9b6ae3440dde
    TokenMonitorScope:
      title: TokenMonitorScope
      type: string
      enum:
        - SELECTED
        - MONITOR_ALL
    Id:
      type: string
      format: uuid
      description: System-generated unique identifier of the resource.
      example: c4d1da72-111e-4d52-bdbf-2e74a2d803d5
    TokenStandard:
      title: TokenStandard
      type: string
      enum:
        - ERC20
        - ERC721
        - ERC1155
        - Fungible
        - FungibleAsset
        - NonFungible
        - NonFungibleEdition
        - ProgrammableNonFungible
        - ProgrammableNonFungibleEdition
    UpdateDate:
      type: string
      format: date-time
      description: Date and time the resource was last updated, in ISO-8601 UTC format.
      example: '2023-01-01T12:04:05Z'
    CreateDate:
      type: string
      format: date-time
      description: Date and time the resource was created, in ISO-8601 UTC format.
      example: '2023-01-01T12:04:05Z'
    Token:
      title: Token
      type: object
      required:
        - id
        - blockchain
        - isNative
        - createDate
        - updateDate
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Blockchain name of the specified token.
        standard:
          $ref: '#/components/schemas/TokenStandard'
        blockchain:
          $ref: '#/components/schemas/Blockchain'
        decimals:
          type: integer
          description: Number of decimal places shown in the token amount.
        isNative:
          type: boolean
          description: >-
            Defines if the token is a native token of the specified blockchain.
            If TRUE, the token is a native token.
        symbol:
          type: string
          description: Blockchain symbol of the specified token.
        tokenAddress:
          $ref: '#/components/schemas/Address'
        updateDate:
          $ref: '#/components/schemas/UpdateDate'
        createDate:
          $ref: '#/components/schemas/CreateDate'
    MonitoredTokens:
      title: MonitoredTokensResponse
      type: object
      properties:
        data:
          type: object
          properties:
            scope:
              $ref: '#/components/schemas/TokenMonitorScope'
            tokens:
              type: array
              items:
                $ref: '#/components/schemas/Token'
              description: >-
                The list of tokens that have been added to the monitored tokens
                list. When fetching wallet balances, only these tokens will be
                shown by default.
    PublicKey:
      title: PublicKeyResponse
      type: object
      properties:
        data:
          type: object
          properties:
            publicKey:
              type: string
    EntityConfig:
      title: GetEntityConfigResponse
      type: object
      properties:
        data:
          type: object
          properties:
            appId:
              description: System-generated unique identifier of the entity's app.
              $ref: '#/components/schemas/Id'
    TestnetBlockchain:
      title: TestnetBlockchain
      type: string
      description: >-
        The testnet blockchain network the resource will be created on or is
        currently on.
      enum:
        - ETH-SEPOLIA
        - AVAX-FUJI
        - MATIC-AMOY
        - SOL-DEVNET
        - ARB-SEPOLIA
        - UNI-SEPOLIA
        - BASE-SEPOLIA
        - OP-SEPOLIA
        - APTOS-TESTNET
      example: MATIC-AMOY
    Error:
      title: Error
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: Code that corresponds to the error.
        message:
          type: string
          description: Message that describes the error.
    Ping:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Response to a ping.
          example: pong
    NotificationType:
      type: string
      enum:
        - '*'
        - transactions.*
        - transactions.inbound
        - transactions.outbound
        - challenges.*
        - challenges.accelerateTransaction
        - challenges.cancelTransaction
        - challenges.changePin
        - challenges.contractExecution
        - challenges.createTransaction
        - challenges.createWallet
        - challenges.initialize
        - challenges.restorePin
        - challenges.setPin
        - challenges.setSecurityQuestions
        - contracts.*
        - contracts.eventLog
        - modularWallet.*
        - modularWallet.userOperation
        - modularWallet.inboundTransfer
        - modularWallet.outboundTransfer
        - travelRule.*
        - travelRule.statusUpdate
        - travelRule.deny
        - travelRule.approve
        - rampSession.*
        - rampSession.completed
        - rampSession.depositReceived
        - rampSession.expired
        - rampSession.failed
        - rampSession.kycApproved
        - rampSession.kycRejected
        - rampSession.kycSubmitted
    Subscription:
      type: object
      title: Subscription
      description: Contains information about a webhook notification subscription.
      required:
        - id
        - name
        - endpoint
        - enabled
        - createDate
        - updateDate
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Name of the webhook notification subscription.
          example: Transactions Webhook
        endpoint:
          type: string
          description: >-
            URL of the endpoint subscribing to notifications. Must be enabled to
            receive notifications.
          example: https://example.org/handler/for/notifications
        enabled:
          type: boolean
          description: >-
            Whether the subscription is enabled. `true` indicates the
            subscription is enabled.
          example: true
        createDate:
          $ref: '#/components/schemas/CreateDate'
        updateDate:
          $ref: '#/components/schemas/UpdateDate'
        notificationTypes:
          type: array
          description: The notification types on which a notification will be sent.
          items:
            $ref: '#/components/schemas/NotificationType'
          example:
            - '*'
        restricted:
          type: boolean
          description: >-
            Whether the webhook is restricted to specific notification types. An
            unrestricted webhook will notify on all notification types. A
            restricted webhook will only notify on the notification types in the
            `notificationTypes` field.
          example: false
    Subscriptions:
      title: SubscriptionsResponse
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
    SubscriptionResponse:
      title: SubscriptionResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Subscription'
    NotificationSignaturePublicKey:
      title: NotificationSignaturePublicKeyResponse
      type: object
      properties:
        data:
          type: object
          required:
            - id
            - algorithm
            - publicKey
            - createDate
          properties:
            id:
              type: string
              format: UUID
              example: 09379bc1-4871-45ad-8b8b-8027795df70d
            algorithm:
              type: string
              example: ECDSA_SHA_256
            publicKey:
              type: string
              example: >-
                QFkwewylAoZIzj0CBQYIKoZIzj0DAQcDQgAEEext6d7AimvYFDAKBwsUsGXrhqmRHNPYum7V/BwfvJLmJeSMe2V0b9eWKPuFxAEH8HCY/MSZdBI+q/E6IdPnSg==
            createDate:
              type: string
              example: '2023-06-01T18:18:06.931526Z'
  parameters:
    Blockchain:
      name: blockchain
      description: Filter by blockchain.
      in: query
      schema:
        $ref: '#/components/schemas/Blockchain'
    TokenAddress:
      name: tokenAddress
      description: Filter by token address.
      in: query
      schema:
        $ref: '#/components/schemas/Address'
    TokenSymbol:
      name: symbol
      description: Filter by token symbol.
      in: query
      schema:
        type: string
    From:
      name: from
      description: >-
        Queries items created since the specified date-time (inclusive) in ISO
        8601 format.
      in: query
      schema:
        type: string
        format: date-time
        example: '2023-01-01T12:04:05Z'
    To:
      name: to
      description: >-
        Queries items created before the specified date-time (inclusive) in ISO
        8601 format.
      in: query
      schema:
        type: string
        format: date-time
        example: '2023-01-01T12:04:05Z'
    PageBefore:
      name: pageBefore
      description: >
        A collection ID value used for pagination.


        It marks the exclusive end of a page. When provided, the collection
        resource will return the next n items before

        the id, with n being specified by pageSize.


        The items will be returned in the natural order of the collection.


        The resource will return the first page if neither pageAfter nor
        pageBefore are specified. 


        SHOULD NOT be used in conjunction with pageAfter.
      in: query
      schema:
        type: string
        format: uuid
    PageAfter:
      name: pageAfter
      description: >
        A collection ID value used for pagination.


        It marks the exclusive begin of a page. When provided, the collection
        resource will return the next n items after

        the id, with n being specified by pageSize.


        The items will be returned in the natural order of the collection.


        The resource will return the first page if neither pageAfter nor
        pageBefore are specified.


        SHOULD NOT be used in conjunction with pageBefore.
      in: query
      schema:
        type: string
        format: uuid
    PageSize:
      name: pageSize
      description: >
        Limits the number of items to be returned.


        Some collections have a strict upper bound that will disregard this
        value. In case the specified value is higher

        than the allowed limit, the collection limit will be used.


        If avoided, the collection will determine the page size itself.
      in: query
      schema:
        type: integer
        default: 10
        maximum: 50
        minimum: 1
    XRequestId:
      name: X-Request-Id
      description: >-
        Developer-provided parameter used to identify this request. Useful when
        communicating with Circle Support.
      in: header
      schema:
        $ref: '#/components/schemas/XRequestId'
    Id:
      name: id
      description: The universally unique identifier of the resource.
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: b3d9d2d5-4c12-4946-a09d-953e82fae2b0
  headers:
    XRequestId:
      description: >
        Developer-provided header parameter or Circle-generated universally
        unique identifier (UUID v4). Useful for identifying a specific request
        when communicating with Circle Support.
      schema:
        $ref: '#/components/schemas/XRequestId'
    PaginationLink:
      description: >
        Pagination cursor information. Format includes the following link
        relations: - self: URL pointing to the current page. - first: URL
        pointing to the first page. - next: URL pointing to the next page
        (omitted on the last page). - prev: URL pointing to the previous page
        (omitted on the first page).

        It's important to form calls with Link header values instead of
        constructing your own URLs.
      schema:
        type: string
        example: >-
          <https://api.circle.com/v1/w3s/wallets?pageAfter=32d1b923-c30d-58de-a42e-157bf7148b85&pageSize=2>;
          rel="next"
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            type: object
            title: BadRequestResponse
            required:
              - code
              - message
            properties:
              code:
                type: integer
                description: Code that corresponds to the error.
              message:
                type: string
                description: Message that describes the error.
            example:
              code: 400
              message: Bad request.
      description: Request cannot be processed due to a client error.
      headers:
        X-Request-Id:
          $ref: '#/components/headers/XRequestId'
    NotAuthorized:
      content:
        application/json:
          schema:
            type: object
            title: NotAuthorizedResponse
            required:
              - code
              - message
            properties:
              code:
                type: integer
                description: Code that corresponds to the error.
              message:
                type: string
                description: Message that describes the error.
            example:
              code: 401
              message: Malformed authorization.
      description: >-
        Request has not been applied because it lacks valid authentication
        credentials.
      headers:
        X-Request-Id:
          $ref: '#/components/headers/XRequestId'
    DefaultError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Error response
      headers:
        X-Request-Id:
          $ref: '#/components/headers/XRequestId'
    NotFound:
      content:
        application/json:
          schema:
            type: object
            title: NotFoundResponse
            required:
              - code
              - message
            properties:
              code:
                type: integer
                description: Code that corresponds to the error.
              message:
                type: string
                description: Message that describes the error.
            example:
              code: 404
              message: Not found.
      description: Specified resource was not found.
      headers:
        X-Request-Id:
          $ref: '#/components/headers/XRequestId'
  requestBodies:
    UpdateMonitoredTokensRequest:
      content:
        application/json:
          schema:
            title: UpdateMonitoredTokensRequest
            type: object
            properties:
              tokenIds:
                type: array
                items:
                  $ref: '#/components/schemas/Id'
                description: >-
                  The list of tokens that will be added to the monitored tokens
                  list. When fetching wallet balances, these tokens will be
                  shown by default.
                example:
                  - a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
      description: Request body
      required: true
    CreateMonitoredTokens:
      content:
        application/json:
          schema:
            title: CreateMonitoredTokensRequest
            type: object
            required:
              - tokenIds
            properties:
              tokenIds:
                type: array
                items:
                  $ref: '#/components/schemas/Id'
                description: >-
                  The list of tokens to add to the monitored tokens list. When
                  fetching wallet balances, only these tokens will be shown by
                  default.
                example:
                  - a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
                minItems: 1
      description: Request body
      required: true
    UpdateMonitoredTokensScope:
      content:
        application/json:
          schema:
            title: UpdateMonitoredTokensScopeRequest
            type: object
            required:
              - scope
            properties:
              scope:
                $ref: '#/components/schemas/TokenMonitorScope'
      description: Request body
      required: true
    DeleteMonitoredTokens:
      content:
        application/json:
          schema:
            title: DeleteMonitoredTokensRequest
            type: object
            required:
              - tokenIds
            properties:
              tokenIds:
                type: array
                items:
                  $ref: '#/components/schemas/Id'
                description: >-
                  Token ids to be removed from the monitored tokens list. Once
                  removed, these tokens will no longer be shown by default when
                  fetching wallet balances.
                example:
                  - a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
                minItems: 1
      description: Request body
      required: true
    FaucetRequest:
      content:
        application/json:
          schema:
            title: FaucetRequest
            type: object
            required:
              - address
              - blockchain
            properties:
              address:
                $ref: '#/components/schemas/Address'
              blockchain:
                $ref: '#/components/schemas/TestnetBlockchain'
              native:
                type: boolean
                description: Request native testnet tokens.
                default: false
                example: true
              usdc:
                type: boolean
                description: Request USDC testnet tokens.
                default: false
                example: true
              eurc:
                type: boolean
                description: Request EURC testnet tokens.
                default: false
                example: true
    CreateSubscription:
      content:
        application/json:
          schema:
            description: Required parameters to create a new subscription.
            type: object
            required:
              - endpoint
            properties:
              endpoint:
                type: string
                description: >-
                  URL of the endpoint to subscribe to notifications. Must be
                  publicly accessible, use HTTPS, and respond with a 2XX status
                  to a POST request.
                example: https://example.org/handler/for/notifications
              notificationTypes:
                type: array
                description: >-
                  The notification types to subscribe to. If not provided, the
                  webhook will be unrestricted, and a notification is sent for
                  every notification type. If the wildcard (`*`) or any
                  combination of the wildcard and a set of notification types is
                  provided, the webhook will also be unrestricted. If a set of
                  notification types are provided, the webhook will be
                  restricted. The restricted status of the webhook is returned
                  in the response object. Each category of notification types
                  also has a wildcard, which will restrict to all notification
                  types from that category.
                items:
                  $ref: '#/components/schemas/NotificationType'
                example:
                  - '*'
      required: true
      description: Schema for the request payload to create a new subscription.
    UpdateSubscription:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - enabled
            properties:
              name:
                type: string
                description: Name of the subscription.
                example: Transactions Webhook
              enabled:
                type: boolean
                description: >-
                  Whether the subscription is enabled. `true` indicates the
                  subscription is active.
                example: true
      required: true
      description: Schema for the request payload to update a new subscription.
